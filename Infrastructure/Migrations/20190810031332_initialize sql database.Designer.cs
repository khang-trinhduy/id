// <auto-generated />
using System;
using Identity_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Identity_API.infrastructure.Migrations
{
    [DbContext(typeof(IdentityDbContext))]
    [Migration("20190810031332_initialize sql database")]
    partial class initializesqldatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:.contact_hilo", "'contact_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.identity_hilo", "'identity_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.product_hilo", "'product_hilo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Contact.Class.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "contact_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Email");

                    b.Property<string>("FullName")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("Contact.Class.IdentityCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "identity_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("AuthorizedBy")
                        .IsRequired();

                    b.Property<DateTime>("AuthorizedDate");

                    b.Property<int?>("ContactId");

                    b.Property<DateTime>("DOB");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Number")
                        .IsRequired();

                    b.Property<string>("Photo");

                    b.HasKey("Id");

                    b.HasIndex("ContactId")
                        .IsUnique()
                        .HasFilter("[ContactId] IS NOT NULL");

                    b.ToTable("Identity");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityCard");
                });

            modelBuilder.Entity("Contact.Class.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "product_hilo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int?>("ContactId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("Product");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Product");
                });

            modelBuilder.Entity("Contact.Class.LocalIdentityCard", b =>
                {
                    b.HasBaseType("Contact.Class.IdentityCard");

                    b.Property<string>("EthnicGroup");

                    b.Property<string>("FullName");

                    b.Property<string>("HomeTown");

                    b.Property<string>("Religion");

                    b.Property<string>("Residence");

                    b.HasDiscriminator().HasValue("Local");
                });

            modelBuilder.Entity("Contact.Class.Passport", b =>
                {
                    b.HasBaseType("Contact.Class.IdentityCard");

                    b.Property<string>("CountryOfPassport");

                    b.Property<DateTime>("ExpireDate");

                    b.Property<string>("FamiliName");

                    b.Property<int>("Gender");

                    b.Property<string>("GivenName");

                    b.Property<string>("Nationality");

                    b.Property<string>("Type");

                    b.HasDiscriminator().HasValue("Passport");
                });

            modelBuilder.Entity("Contact.Class.Apartments.OneBedroomApartment", b =>
                {
                    b.HasBaseType("Contact.Class.Product");

                    b.Property<double>("Area");

                    b.Property<string>("Direction");

                    b.Property<int>("Floor");

                    b.Property<double>("Price");

                    b.Property<string>("View");

                    b.HasDiscriminator().HasValue("1br");
                });

            modelBuilder.Entity("Contact.Class.Apartments.StudioApartment", b =>
                {
                    b.HasBaseType("Contact.Class.Product");

                    b.Property<double>("Area")
                        .HasColumnName("StudioApartment_Area");

                    b.Property<string>("Direction")
                        .HasColumnName("StudioApartment_Direction");

                    b.Property<int>("Floor")
                        .HasColumnName("StudioApartment_Floor");

                    b.Property<double>("Price")
                        .HasColumnName("StudioApartment_Price");

                    b.Property<string>("View")
                        .HasColumnName("StudioApartment_View");

                    b.HasDiscriminator().HasValue("studio");
                });

            modelBuilder.Entity("Contact.Class.Apartments.ThreeBedroomApartment", b =>
                {
                    b.HasBaseType("Contact.Class.Product");

                    b.Property<double>("Area")
                        .HasColumnName("ThreeBedroomApartment_Area");

                    b.Property<string>("Direction")
                        .HasColumnName("ThreeBedroomApartment_Direction");

                    b.Property<int>("Floor")
                        .HasColumnName("ThreeBedroomApartment_Floor");

                    b.Property<double>("Price")
                        .HasColumnName("ThreeBedroomApartment_Price");

                    b.Property<string>("View")
                        .HasColumnName("ThreeBedroomApartment_View");

                    b.HasDiscriminator().HasValue("3br");
                });

            modelBuilder.Entity("Contact.Class.Apartments.TwoBedroomApartment", b =>
                {
                    b.HasBaseType("Contact.Class.Product");

                    b.Property<double>("Area")
                        .HasColumnName("TwoBedroomApartment_Area");

                    b.Property<string>("Direction")
                        .HasColumnName("TwoBedroomApartment_Direction");

                    b.Property<int>("Floor")
                        .HasColumnName("TwoBedroomApartment_Floor");

                    b.Property<double>("Price")
                        .HasColumnName("TwoBedroomApartment_Price");

                    b.Property<string>("View")
                        .HasColumnName("TwoBedroomApartment_View");

                    b.HasDiscriminator().HasValue("2br");
                });

            modelBuilder.Entity("Contact.Class.Apartments.TwoBedroomPlusApartment", b =>
                {
                    b.HasBaseType("Contact.Class.Product");

                    b.Property<double>("Area")
                        .HasColumnName("TwoBedroomPlusApartment_Area");

                    b.Property<string>("Direction")
                        .HasColumnName("TwoBedroomPlusApartment_Direction");

                    b.Property<int>("Floor")
                        .HasColumnName("TwoBedroomPlusApartment_Floor");

                    b.Property<double>("Price")
                        .HasColumnName("TwoBedroomPlusApartment_Price");

                    b.Property<string>("View")
                        .HasColumnName("TwoBedroomPlusApartment_View");

                    b.HasDiscriminator().HasValue("2br+");
                });

            modelBuilder.Entity("Contact.Class.IdentityCard", b =>
                {
                    b.HasOne("Contact.Class.Contact", "Contact")
                        .WithOne("Identity")
                        .HasForeignKey("Contact.Class.IdentityCard", "ContactId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Contact.Class.Product", b =>
                {
                    b.HasOne("Contact.Class.Contact")
                        .WithMany("Product")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
